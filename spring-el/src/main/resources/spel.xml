<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--
        SPRING EL Spring表达式语言
        * 是一个支持运行时查询和操作对象图的强大表达式语言
        * 使用#{...}作为定界符，在大括号内的就是SPEL
        * SPEL为bean的动态赋值提供便利

        SP EL可以实现:
            - 通过bean的id对bean进行引用
            - 调用方法以及引用其他对象中的属性
            - 计算表达式的值
                - 支持算术运算符 + - * / % ^
                - 支持+号连接字符串
                - 支持比较运算符 < > == <= >= lt gt eq le ge
                - 支持逻辑运算符 and or not |
                - 支持三目运算符  ?:
            - 正则表达式的匹配
            - 调用静态方法或者静态属性

     -->

    <bean id="circle" class="com.jachs.springel.entity.Circle">
        <constructor-arg name="radius" value="50"/>
        <!--调用静态属性Math.PI-->
        <!--引用其他对象中的属性circle.radius-->
        <!--算术运算 * ^-->
        <property name="peri" value="#{T(java.lang.Math).PI * circle.radius *2}"/>
        <property name="area" value="#{T(java.lang.Math).PI * circle.radius^2}"/>
    </bean>


    <bean id="email" class="com.jachs.springel.entity.Email">
        <constructor-arg name="email" value="SPELTest@126.com"/>
        <!--引用其他的bean-->
        <property name="circle" value="#{circle}"/>
        <!--正则表达式的匹配邮箱-->
        <!--email最终的输出结果 email='true'-->
        <property name="email" value="#{email.email matches '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z0-9]{2,6}$'}"/>
    </bean>


</beans>